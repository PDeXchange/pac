// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PDeXchange/pac/internal/pkg/pac-go-server/client/kubernetes (interfaces: Client)

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	reflect "reflect"
	time "time"

	v1alpha1 "github.com/PDeXchange/pac/apis/app/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCatalog mocks base method.
func (m *MockClient) CreateCatalog(arg0 v1alpha1.Catalog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCatalog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCatalog indicates an expected call of CreateCatalog.
func (mr *MockClientMockRecorder) CreateCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCatalog", reflect.TypeOf((*MockClient)(nil).CreateCatalog), arg0)
}

// CreateService mocks base method.
func (m *MockClient) CreateService(arg0 v1alpha1.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockClientMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockClient)(nil).CreateService), arg0)
}

// DeleteCatalog mocks base method.
func (m *MockClient) DeleteCatalog(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCatalog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCatalog indicates an expected call of DeleteCatalog.
func (mr *MockClientMockRecorder) DeleteCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCatalog", reflect.TypeOf((*MockClient)(nil).DeleteCatalog), arg0)
}

// DeleteService mocks base method.
func (m *MockClient) DeleteService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockClientMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockClient)(nil).DeleteService), arg0, arg1)
}

// GetCatalog mocks base method.
func (m *MockClient) GetCatalog(arg0 string) (v1alpha1.Catalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalog", arg0)
	ret0, _ := ret[0].(v1alpha1.Catalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalog indicates an expected call of GetCatalog.
func (mr *MockClientMockRecorder) GetCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalog", reflect.TypeOf((*MockClient)(nil).GetCatalog), arg0)
}

// GetCatalogs mocks base method.
func (m *MockClient) GetCatalogs() (v1alpha1.CatalogList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogs")
	ret0, _ := ret[0].(v1alpha1.CatalogList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogs indicates an expected call of GetCatalogs.
func (mr *MockClientMockRecorder) GetCatalogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogs", reflect.TypeOf((*MockClient)(nil).GetCatalogs))
}

// GetService mocks base method.
func (m *MockClient) GetService(arg0 string) (v1alpha1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(v1alpha1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockClientMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockClient)(nil).GetService), arg0)
}

// GetServices mocks base method.
func (m *MockClient) GetServices(arg0 string) (v1alpha1.ServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0)
	ret0, _ := ret[0].(v1alpha1.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockClientMockRecorder) GetServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockClient)(nil).GetServices), arg0)
}

// RetireCatalog mocks base method.
func (m *MockClient) RetireCatalog(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetireCatalog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetireCatalog indicates an expected call of RetireCatalog.
func (mr *MockClientMockRecorder) RetireCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetireCatalog", reflect.TypeOf((*MockClient)(nil).RetireCatalog), arg0)
}

// UpdateServiceExpiry mocks base method.
func (m *MockClient) UpdateServiceExpiry(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceExpiry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceExpiry indicates an expected call of UpdateServiceExpiry.
func (mr *MockClientMockRecorder) UpdateServiceExpiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceExpiry", reflect.TypeOf((*MockClient)(nil).UpdateServiceExpiry), arg0, arg1)
}
