// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PDeXchange/pac/internal/pkg/pac-go-server/db (interfaces: DB)

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	models "github.com/PDeXchange/pac/internal/pkg/pac-go-server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AcceptTermsAndConditions mocks base method.
func (m *MockDB) AcceptTermsAndConditions(arg0 *models.TermsAndConditions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTermsAndConditions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptTermsAndConditions indicates an expected call of AcceptTermsAndConditions.
func (mr *MockDBMockRecorder) AcceptTermsAndConditions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsAndConditions", reflect.TypeOf((*MockDB)(nil).AcceptTermsAndConditions), arg0)
}

// Connect mocks base method.
func (m *MockDB) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDBMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDB)(nil).Connect))
}

// CreateKey mocks base method.
func (m *MockDB) CreateKey(arg0 *models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockDBMockRecorder) CreateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockDB)(nil).CreateKey), arg0)
}

// DeleteKey mocks base method.
func (m *MockDB) DeleteKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockDBMockRecorder) DeleteKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockDB)(nil).DeleteKey), arg0)
}

// DeleteQuota mocks base method.
func (m *MockDB) DeleteQuota(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuota indicates an expected call of DeleteQuota.
func (mr *MockDBMockRecorder) DeleteQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuota", reflect.TypeOf((*MockDB)(nil).DeleteQuota), arg0)
}

// DeleteRequest mocks base method.
func (m *MockDB) DeleteRequest(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequest indicates an expected call of DeleteRequest.
func (mr *MockDBMockRecorder) DeleteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequest", reflect.TypeOf((*MockDB)(nil).DeleteRequest), arg0)
}

// DeleteTermsAndConditionsByUserID mocks base method.
func (m *MockDB) DeleteTermsAndConditionsByUserID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTermsAndConditionsByUserID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTermsAndConditionsByUserID indicates an expected call of DeleteTermsAndConditionsByUserID.
func (mr *MockDBMockRecorder) DeleteTermsAndConditionsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTermsAndConditionsByUserID", reflect.TypeOf((*MockDB)(nil).DeleteTermsAndConditionsByUserID), arg0)
}

// Disconnect mocks base method.
func (m *MockDB) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockDBMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockDB)(nil).Disconnect))
}

// GetEventsByType mocks base method.
func (m *MockDB) GetEventsByType(arg0 models.EventType, arg1 uint) ([]models.Event, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByType", arg0, arg1)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEventsByType indicates an expected call of GetEventsByType.
func (mr *MockDBMockRecorder) GetEventsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByType", reflect.TypeOf((*MockDB)(nil).GetEventsByType), arg0, arg1)
}

// GetEventsByUserID mocks base method.
func (m *MockDB) GetEventsByUserID(arg0 string, arg1, arg2 int64) ([]models.Event, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEventsByUserID indicates an expected call of GetEventsByUserID.
func (mr *MockDBMockRecorder) GetEventsByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByUserID", reflect.TypeOf((*MockDB)(nil).GetEventsByUserID), arg0, arg1, arg2)
}

// GetGroupsQuota mocks base method.
func (m *MockDB) GetGroupsQuota(arg0 []string) ([]models.Quota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsQuota", arg0)
	ret0, _ := ret[0].([]models.Quota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsQuota indicates an expected call of GetGroupsQuota.
func (mr *MockDBMockRecorder) GetGroupsQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsQuota", reflect.TypeOf((*MockDB)(nil).GetGroupsQuota), arg0)
}

// GetKeyByID mocks base method.
func (m *MockDB) GetKeyByID(arg0 string) (*models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByID", arg0)
	ret0, _ := ret[0].(*models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyByID indicates an expected call of GetKeyByID.
func (mr *MockDBMockRecorder) GetKeyByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByID", reflect.TypeOf((*MockDB)(nil).GetKeyByID), arg0)
}

// GetKeyByUserID mocks base method.
func (m *MockDB) GetKeyByUserID(arg0 string) ([]models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByUserID", arg0)
	ret0, _ := ret[0].([]models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyByUserID indicates an expected call of GetKeyByUserID.
func (mr *MockDBMockRecorder) GetKeyByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByUserID", reflect.TypeOf((*MockDB)(nil).GetKeyByUserID), arg0)
}

// GetQuotaForGroupID mocks base method.
func (m *MockDB) GetQuotaForGroupID(arg0 string) (*models.Quota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotaForGroupID", arg0)
	ret0, _ := ret[0].(*models.Quota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotaForGroupID indicates an expected call of GetQuotaForGroupID.
func (mr *MockDBMockRecorder) GetQuotaForGroupID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotaForGroupID", reflect.TypeOf((*MockDB)(nil).GetQuotaForGroupID), arg0)
}

// GetRequestByGroupIDAndUserID mocks base method.
func (m *MockDB) GetRequestByGroupIDAndUserID(arg0, arg1 string) ([]models.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestByGroupIDAndUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestByGroupIDAndUserID indicates an expected call of GetRequestByGroupIDAndUserID.
func (mr *MockDBMockRecorder) GetRequestByGroupIDAndUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestByGroupIDAndUserID", reflect.TypeOf((*MockDB)(nil).GetRequestByGroupIDAndUserID), arg0, arg1)
}

// GetRequestByID mocks base method.
func (m *MockDB) GetRequestByID(arg0 string) (*models.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestByID", arg0)
	ret0, _ := ret[0].(*models.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestByID indicates an expected call of GetRequestByID.
func (mr *MockDBMockRecorder) GetRequestByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestByID", reflect.TypeOf((*MockDB)(nil).GetRequestByID), arg0)
}

// GetRequestByServiceName mocks base method.
func (m *MockDB) GetRequestByServiceName(arg0 string) ([]models.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestByServiceName", arg0)
	ret0, _ := ret[0].([]models.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestByServiceName indicates an expected call of GetRequestByServiceName.
func (mr *MockDBMockRecorder) GetRequestByServiceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestByServiceName", reflect.TypeOf((*MockDB)(nil).GetRequestByServiceName), arg0)
}

// GetRequestsByUserID mocks base method.
func (m *MockDB) GetRequestsByUserID(arg0, arg1 string) ([]models.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByUserID indicates an expected call of GetRequestsByUserID.
func (mr *MockDBMockRecorder) GetRequestsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByUserID", reflect.TypeOf((*MockDB)(nil).GetRequestsByUserID), arg0, arg1)
}

// GetTermsAndConditionsByUserID mocks base method.
func (m *MockDB) GetTermsAndConditionsByUserID(arg0 string) (*models.TermsAndConditions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermsAndConditionsByUserID", arg0)
	ret0, _ := ret[0].(*models.TermsAndConditions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsAndConditionsByUserID indicates an expected call of GetTermsAndConditionsByUserID.
func (mr *MockDBMockRecorder) GetTermsAndConditionsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsAndConditionsByUserID", reflect.TypeOf((*MockDB)(nil).GetTermsAndConditionsByUserID), arg0)
}

// MarkEventAsNotified mocks base method.
func (m *MockDB) MarkEventAsNotified(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEventAsNotified", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkEventAsNotified indicates an expected call of MarkEventAsNotified.
func (mr *MockDBMockRecorder) MarkEventAsNotified(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEventAsNotified", reflect.TypeOf((*MockDB)(nil).MarkEventAsNotified), arg0)
}

// NewEvent mocks base method.
func (m *MockDB) NewEvent(arg0 *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewEvent indicates an expected call of NewEvent.
func (mr *MockDBMockRecorder) NewEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvent", reflect.TypeOf((*MockDB)(nil).NewEvent), arg0)
}

// NewQuota mocks base method.
func (m *MockDB) NewQuota(arg0 *models.Quota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewQuota indicates an expected call of NewQuota.
func (mr *MockDBMockRecorder) NewQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuota", reflect.TypeOf((*MockDB)(nil).NewQuota), arg0)
}

// NewRequest mocks base method.
func (m *MockDB) NewRequest(arg0 *models.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockDBMockRecorder) NewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockDB)(nil).NewRequest), arg0)
}

// UpdateQuota mocks base method.
func (m *MockDB) UpdateQuota(arg0 *models.Quota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuota indicates an expected call of UpdateQuota.
func (mr *MockDBMockRecorder) UpdateQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuota", reflect.TypeOf((*MockDB)(nil).UpdateQuota), arg0)
}

// UpdateRequestState mocks base method.
func (m *MockDB) UpdateRequestState(arg0 string, arg1 models.RequestStateType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequestState indicates an expected call of UpdateRequestState.
func (mr *MockDBMockRecorder) UpdateRequestState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestState", reflect.TypeOf((*MockDB)(nil).UpdateRequestState), arg0, arg1)
}

// UpdateRequestStateWithComment mocks base method.
func (m *MockDB) UpdateRequestStateWithComment(arg0 string, arg1 models.RequestStateType, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestStateWithComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequestStateWithComment indicates an expected call of UpdateRequestStateWithComment.
func (mr *MockDBMockRecorder) UpdateRequestStateWithComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestStateWithComment", reflect.TypeOf((*MockDB)(nil).UpdateRequestStateWithComment), arg0, arg1, arg2)
}

// WatchEvents mocks base method.
func (m *MockDB) WatchEvents(arg0 chan<- *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEvents", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchEvents indicates an expected call of WatchEvents.
func (mr *MockDBMockRecorder) WatchEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEvents", reflect.TypeOf((*MockDB)(nil).WatchEvents), arg0)
}
